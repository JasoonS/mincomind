// Generated by ReScript, PLEASE EDIT WITH CARE

import * as JsxRuntime from "react/jsx-runtime";

function getPagesLeft(activePage) {
  var pagesRef = [];
  if (activePage > 3) {
    pagesRef = pagesRef.concat([activePage - 2 | 0]);
  }
  if (activePage > 2) {
    pagesRef = pagesRef.concat([activePage - 1 | 0]);
  }
  return pagesRef;
}

function getPagesRight(activePage, numPages) {
  var pagesRef = [];
  if (activePage < (numPages - 1 | 0)) {
    pagesRef = pagesRef.concat([activePage + 1 | 0]);
  }
  if (activePage < (numPages - 2 | 0)) {
    pagesRef = pagesRef.concat([activePage + 2 | 0]);
  }
  return pagesRef;
}

function pageItem(num, onChange) {
  return JsxRuntime.jsx("span", {
              children: num.toString(),
              className: "mx-3 cursor-pointer",
              onClick: (function (param) {
                  onChange(num);
                })
            }, num.toString());
}

function pageItemActive(num) {
  return JsxRuntime.jsx("span", {
              children: num.toString(),
              className: "bg-gray-200 mx-3 cursor-default"
            });
}

function ellipsis() {
  return JsxRuntime.jsx("span", {
              children: "...",
              className: "cursor-default text-xs"
            });
}

function Pagination(props) {
  var onChange = props.onChange;
  var numPages = props.numPages;
  var activePage = props.activePage;
  var leftPages = getPagesLeft(activePage);
  var rightPages = getPagesRight(activePage, numPages);
  var showDotsLeft = leftPages.length > 0 && leftPages[0] > 2;
  var showDotsRight = rightPages.length > 0 && rightPages[rightPages.length - 1 | 0] < (numPages - 1 | 0);
  var showFirstPage = activePage !== 1;
  var showLastPage = activePage !== numPages;
  var showCurrentPage = numPages !== 1;
  if (activePage > numPages) {
    return null;
  } else {
    return JsxRuntime.jsxs("div", {
                children: [
                  showFirstPage ? pageItem(1, onChange) : null,
                  showDotsLeft ? ellipsis() : null,
                  leftPages.map(function (p) {
                        return pageItem(p, onChange);
                      }),
                  showCurrentPage ? pageItemActive(activePage) : null,
                  rightPages.map(function (p) {
                        return pageItem(p, onChange);
                      }),
                  showDotsRight ? ellipsis() : null,
                  showLastPage ? pageItem(numPages, onChange) : null
                ],
                className: "my-2"
              });
  }
}

var make = Pagination;

export {
  getPagesLeft ,
  getPagesRight ,
  pageItem ,
  pageItemActive ,
  ellipsis ,
  make ,
}
/* react/jsx-runtime Not a pure module */
