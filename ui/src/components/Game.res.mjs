// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as JsxRuntime from "react/jsx-runtime";

function getBgColor(colour) {
  switch (colour) {
    case 0 :
        return "bg-red-400";
    case 1 :
        return "bg-orange-400";
    case 2 :
        return "bg-yellow-400";
    case 3 :
        return "bg-green-400";
    case 4 :
        return "bg-blue-400";
    case 5 :
        return "bg-purple-400";
    
  }
}

function make(_0, _1, _2, _3) {
  return {
          _0: _0,
          _1: _1,
          _2: _2,
          _3: _3
        };
}

function toArray(param) {
  return [
          param._0,
          param._1,
          param._2,
          param._3
        ];
}

var Guess = {
  make: make,
  toArray: toArray
};

var ExceededLimitOf4 = /* @__PURE__ */Caml_exceptions.create("Game.CowsAndBulls.ExceededLimitOf4");

function make$1(bulls, cows) {
  if ((cows + bulls | 0) <= 4) {
    return {
            TAG: "Ok",
            _0: {
              bulls: bulls,
              cows: cows
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              RE_EXN_ID: ExceededLimitOf4
            }
          };
  }
}

function toPegOptions(param) {
  var cows = param.cows;
  var bulls = param.bulls;
  return Belt_Array.concatMany([
              Core__Array.make(bulls, "Bull"),
              Core__Array.make(cows, "Cow"),
              Core__Array.make((4 - bulls | 0) - cows | 0, undefined)
            ]);
}

function getBgColor$1(optCowOrBull) {
  if (optCowOrBull !== undefined) {
    if (optCowOrBull === "Bull") {
      return "bg-black";
    } else {
      return "bg-white";
    }
  } else {
    return "bg-gray-200";
  }
}

var CowsAndBulls = {
  ExceededLimitOf4: ExceededLimitOf4,
  make: make$1,
  toPegOptions: toPegOptions,
  getBgColor: getBgColor$1
};

function Game$GuessRow(props) {
  return JsxRuntime.jsxs("div", {
              children: [
                "Cows and bulls",
                JsxRuntime.jsx("div", {
                      children: toPegOptions(props.cowsAndBulls).map(function (optCowOrBull, i) {
                            return JsxRuntime.jsx("div", {
                                        className: "border h-10 " + getBgColor$1(optCowOrBull)
                                      }, i.toString());
                          }),
                      className: "w-20 grid grid-cols-2 gap-1"
                    }),
                "Guess",
                JsxRuntime.jsx("div", {
                      children: toArray(props.guess).map(function (c, i) {
                            return JsxRuntime.jsx("div", {
                                        className: "border h-10 w-10 " + getBgColor(c)
                                      }, i.toString());
                          }),
                      className: "flex gap-1"
                    })
              ]
            });
}

var GuessRow = {
  make: Game$GuessRow
};

function Game(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(Game$GuessRow, {
                    guess: {
                      _0: 0,
                      _1: 5,
                      _2: 1,
                      _3: 2
                    },
                    cowsAndBulls: {
                      bulls: 1,
                      cows: 2
                    }
                  }),
              className: "border"
            });
}

var make$2 = Game;

export {
  getBgColor ,
  Guess ,
  CowsAndBulls ,
  GuessRow ,
  make$2 as make,
}
/* react/jsx-runtime Not a pure module */
