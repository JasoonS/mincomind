// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Viem from "viem";
import * as React from "react";
import * as Mincomind from "../bindings/Mincomind.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Result from "@rescript/core/src/Core__Result.res.mjs";
import * as ContractHooks from "../hooks/ContractHooks.res.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as JsxRuntime from "react/jsx-runtime";

function getBgColor(colour) {
  switch (colour) {
    case 0 :
        return "bg-red-400";
    case 1 :
        return "bg-orange-400";
    case 2 :
        return "bg-yellow-400";
    case 3 :
        return "bg-green-400";
    case 4 :
        return "bg-blue-400";
    case 5 :
        return "bg-purple-400";
    
  }
}

var ExceededLimitOf4 = /* @__PURE__ */Caml_exceptions.create("Game.CowsAndBulls.ExceededLimitOf4");

function make(bulls, cows) {
  if ((cows + bulls | 0) <= 4) {
    return {
            TAG: "Ok",
            _0: {
              bulls: bulls,
              cows: cows
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              RE_EXN_ID: ExceededLimitOf4
            }
          };
  }
}

function toPegOptions(param) {
  var cows = param.cows;
  var bulls = param.bulls;
  return Belt_Array.concatMany([
              Core__Array.make(bulls, "Bull"),
              Core__Array.make(cows, "Cow"),
              Core__Array.make((4 - bulls | 0) - cows | 0, undefined)
            ]);
}

function getBgColor$1(optCowOrBull) {
  if (optCowOrBull !== undefined) {
    if (optCowOrBull === "Bull") {
      return "bg-black";
    } else {
      return "bg-white";
    }
  } else {
    return "bg-black opacity-25";
  }
}

var CowsAndBulls = {
  ExceededLimitOf4: ExceededLimitOf4,
  make: make,
  toPegOptions: toPegOptions,
  getBgColor: getBgColor$1
};

function make$1(_0, _1, _2, _3) {
  return {
          _0: _0,
          _1: _1,
          _2: _2,
          _3: _3
        };
}

function toArray(param) {
  return [
          param._0,
          param._1,
          param._2,
          param._3
        ];
}

var Guess = {
  make: make$1,
  toArray: toArray
};

function Game$GuessRow(props) {
  var guess = props.guess;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: toPegOptions(guess.cowsAndBulls).map(function (optCowOrBull, i) {
                            return JsxRuntime.jsx("div", {
                                        className: "border border-blue-500 h-5 rounded-full " + getBgColor$1(optCowOrBull)
                                      }, i.toString());
                          }),
                      className: "w-14 grid grid-cols-2 gap-1 border p-1"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: (9 - props.attempt | 0).toString(),
                              className: "text-white opacity-40 pr-4"
                            }),
                        toArray(guess.guess).map(function (c, i) {
                              return JsxRuntime.jsx("div", {
                                          className: "border h-10 w-10 drop-shadow-md rounded-full " + getBgColor(c)
                                        }, i.toString());
                            })
                      ],
                      className: "flex gap-1 mx-auto items-center p-2"
                    })
              ],
              className: "bg-blue-300 flex items-center border w-full"
            });
}

var GuessRow = {
  make: Game$GuessRow
};

function Game$GuessCreator(props) {
  var selectedColor = props.selectedColor;
  var match = React.useState(function () {
        return {
                _0: undefined,
                _1: undefined,
                _2: undefined,
                _3: undefined
              };
      });
  var setCurrentGuess = match[1];
  var currentGuess = match[0];
  var getOptBgColor = function (optC) {
    if (optC !== undefined) {
      return getBgColor(optC);
    } else {
      return "bg-black opacity-25";
    }
  };
  var set0 = function (param) {
    setCurrentGuess(function (prev) {
          return {
                  _0: selectedColor,
                  _1: prev._1,
                  _2: prev._2,
                  _3: prev._3
                };
        });
  };
  var set1 = function (param) {
    setCurrentGuess(function (prev) {
          return {
                  _0: prev._0,
                  _1: selectedColor,
                  _2: prev._2,
                  _3: prev._3
                };
        });
  };
  var set2 = function (param) {
    setCurrentGuess(function (prev) {
          return {
                  _0: prev._0,
                  _1: prev._1,
                  _2: selectedColor,
                  _3: prev._3
                };
        });
  };
  var set3 = function (param) {
    setCurrentGuess(function (prev) {
          return {
                  _0: prev._0,
                  _1: prev._1,
                  _2: prev._2,
                  _3: selectedColor
                };
        });
  };
  var allSelected = currentGuess._0 !== undefined && currentGuess._1 !== undefined && currentGuess._2 !== undefined && currentGuess._3 !== undefined;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: allSelected ? JsxRuntime.jsx("button", {
                              children: " OK ",
                              className: "text-center text-white text-lg mx-auto border py-0 px-2",
                              disabled: !allSelected
                            }) : JsxRuntime.jsx("p", {
                              children: "Select colors",
                              className: "text-white text-center text-xxs leading-tight"
                            }),
                      className: "w-16 grid  text-center"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              className: "border h-10 w-10 drop-shadow-md rounded-full " + getOptBgColor(currentGuess._0),
                              onClick: set0
                            }),
                        JsxRuntime.jsx("div", {
                              className: "border h-10 w-10 drop-shadow-md rounded-full " + getOptBgColor(currentGuess._1),
                              onClick: set1
                            }),
                        JsxRuntime.jsx("div", {
                              className: "border h-10 w-10 drop-shadow-md rounded-full " + getOptBgColor(currentGuess._2),
                              onClick: set2
                            }),
                        JsxRuntime.jsx("div", {
                              className: "border h-10 w-10 drop-shadow-md rounded-full " + getOptBgColor(currentGuess._3),
                              onClick: set3
                            })
                      ],
                      className: "flex gap-1 justify-between p-1 mx-auto"
                    })
              ],
              className: "bg-blue-400 flex items-center border w-full"
            });
}

var GuessCreator = {
  make: Game$GuessCreator
};

function Game$ColorSelector(props) {
  var setSelectedColor = props.setSelectedColor;
  var selectedColor = props.selectedColor;
  var colors = [
    0,
    1,
    2,
    3,
    4,
    5
  ];
  var getBgColor$2 = function (c) {
    var bgColor = getBgColor(c);
    if (c === selectedColor) {
      return bgColor + " brightness-75 border border-2 border-white";
    } else {
      return bgColor;
    }
  };
  return JsxRuntime.jsx("div", {
              children: colors.map(function (c, i) {
                    return JsxRuntime.jsx("div", {
                                className: " h-10 w-10 drop-shadow-md rounded-full " + getBgColor$2(c) + " pointer hover:brightness-20 ",
                                onClick: (function (param) {
                                    setSelectedColor(function (param) {
                                          return c;
                                        });
                                  })
                              }, i.toString());
                  }),
              className: "flex gap-1 justify-between p-2"
            });
}

var ColorSelector = {
  make: Game$ColorSelector
};

function Game$EmptyRow(props) {
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(4, undefined).map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        className: "border h-5 rounded-full " + getBgColor$1(undefined)
                                      }, i.toString());
                          }),
                      className: "w-14 grid grid-cols-2 gap-1 border p-1"
                    }),
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(4, 0).map(function (c, i) {
                            return JsxRuntime.jsx("div", {
                                        className: "border h-10 w-10 drop-shadow-md rounded-full bg-black opacity-25"
                                      }, i.toString());
                          }),
                      className: "flex gap-1 mx-auto items-center p-2"
                    })
              ],
              className: "bg-blue-300 flex items-center border w-full"
            });
}

var EmptyRow = {
  make: Game$EmptyRow
};

function makeGuess(guess, cows, bulls) {
  return Core__Result.map(make(bulls, cows), (function (cowsAndBulls) {
                return {
                        guess: guess,
                        cowsAndBulls: cowsAndBulls
                      };
              }));
}

function resultToOption(result) {
  if (result.TAG === "Ok") {
    return Caml_option.some(result._0);
  }
  
}

var mockGuesses = Core__Array.filterMap([
      makeGuess({
            _0: 4,
            _1: 0,
            _2: 1,
            _3: 2
          }, 1, 1),
      makeGuess({
            _0: 5,
            _1: 0,
            _2: 2,
            _3: 3
          }, 2, 0),
      makeGuess({
            _0: 4,
            _1: 4,
            _2: 1,
            _3: 1
          }, 0, 3),
      makeGuess({
            _0: 2,
            _1: 2,
            _2: 1,
            _3: 1
          }, 2, 2)
    ], resultToOption);

function Game(props) {
  var mincomind = Mincomind.getContract(props.walletClient, props.publicClient);
  console.log("mincomind", mincomind);
  var latestGameId = ContractHooks.useLatestGameId(Viem.getAddress("0x7660788b35e06A4D6BF4985729ED1721dE351e7b"), mincomind);
  console.log("latestGameId", latestGameId);
  var match = React.useState(function () {
        return mockGuesses;
      });
  var match$1 = React.useState(function () {
        return 0;
      });
  var selectedColor = match$1[0];
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx(Game$EmptyRow, {}),
                      JsxRuntime.jsx(Game$EmptyRow, {}),
                      JsxRuntime.jsx(Game$EmptyRow, {}),
                      JsxRuntime.jsx(Game$EmptyRow, {}),
                      match[0].map(function (guess, i) {
                            return JsxRuntime.jsx(Game$GuessRow, {
                                        guess: guess,
                                        attempt: i
                                      }, i.toString());
                          }),
                      JsxRuntime.jsx(Game$GuessCreator, {
                            selectedColor: selectedColor
                          }),
                      JsxRuntime.jsx(Game$ColorSelector, {
                            selectedColor: selectedColor,
                            setSelectedColor: match$1[1]
                          })
                    ]
                  }),
              className: "flex flex-col items-center max-w-md mx-auto rounded px-8"
            });
}

var make$2 = Game;

export {
  getBgColor ,
  CowsAndBulls ,
  Guess ,
  GuessRow ,
  GuessCreator ,
  ColorSelector ,
  EmptyRow ,
  makeGuess ,
  resultToOption ,
  mockGuesses ,
  make$2 as make,
}
/* mockGuesses Not a pure module */
