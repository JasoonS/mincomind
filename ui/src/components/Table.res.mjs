// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Queries from "../queries/Queries.res.mjs";
import * as Pagination from "./Pagination.res.mjs";
import * as ContractHooks from "../hooks/ContractHooks.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function Table$Row(props) {
  var lockedFunds = props.lockedFunds;
  var totalPoints = props.totalPoints;
  var availableFunds = props.availableFunds;
  var player = props.player;
  if (typeof availableFunds === "object" && availableFunds.TAG !== "Err" && typeof totalPoints === "object" && totalPoints.TAG !== "Err" && typeof lockedFunds === "object" && lockedFunds.TAG !== "Err") {
    var totalAvailable = availableFunds._0 - lockedFunds._0;
    var numerator = BigInt(player.points) * totalAvailable;
    var result = numerator / (BigInt(totalPoints._0 + 1 | 0) * 100000000000000n);
    result.toString();
  }
  return JsxRuntime.jsxs("tr", {
              children: [
                JsxRuntime.jsx("td", {
                      children: JsxRuntime.jsxs("a", {
                            children: [
                              JsxRuntime.jsx("span", {
                                    children: "ðŸ”—",
                                    className: "bg-blue-100 pointer p-1 mx-2 hover:bg-blue-800 rounded"
                                  }),
                              "  ",
                              player.id
                            ],
                            className: "pointer hover:opacity-70",
                            href: "https://explorer.testnet.inco.org/address/" + player.id,
                            rel: "no-referrer no-openner",
                            target: "_blank"
                          }),
                      className: "py-1 px-3 text-left"
                    }),
                JsxRuntime.jsx("td", {
                      children: player.numberOfGames.toString(),
                      className: "py-1 px-3 text-left"
                    }),
                JsxRuntime.jsx("td", {
                      children: player.points,
                      className: "py-1 px-3 text-left"
                    })
              ],
              className: props.rowStyle
            });
}

var Row = {
  make: Table$Row
};

function Table$TableInner(props) {
  var mincomind = props.mincomind;
  var toralPoints = ContractHooks.useTotalPoints(mincomind);
  var lockedFunds = ContractHooks.useLockedFunds(mincomind);
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("table", {
                    children: [
                      JsxRuntime.jsx("thead", {
                            children: JsxRuntime.jsxs("tr", {
                                  children: [
                                    JsxRuntime.jsx("th", {
                                          children: "Player",
                                          className: "py-3 px-6 text-left"
                                        }),
                                    JsxRuntime.jsx("th", {
                                          children: "#No of Games",
                                          className: "py-3 px-6 text-left"
                                        }),
                                    JsxRuntime.jsx("th", {
                                          children: "Points",
                                          className: "py-3 px-6 text-left"
                                        })
                                  ]
                                }),
                            className: "m-10 text-xs bg-black"
                          }),
                      JsxRuntime.jsx("tbody", {
                            children: props.players.map(function (player, index) {
                                  return JsxRuntime.jsx(Table$Row, {
                                              player: player,
                                              rowStyle: index % 2 === 0 ? "bg-white bg-opacity-10" : "",
                                              mincomind: mincomind,
                                              availableFunds: {
                                                TAG: "Data",
                                                _0: 100000000000000000n
                                              },
                                              totalPoints: toralPoints,
                                              lockedFunds: lockedFunds
                                            }, player.id);
                                })
                          })
                    ],
                    className: "text-white border rounded border-2 border-primary p-2 m-2 bg-black bg-opacity-30"
                  })
            });
}

var TableInner = {
  make: Table$TableInner
};

function Table$TableOuter(props) {
  var players = props.players;
  var match = React.useState(function () {
        return 0;
      });
  var setPage = match[1];
  var page = match[0];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(Table$TableInner, {
                      players: players,
                      page: page,
                      pageSize: 10,
                      mincomind: props.mincomind,
                      client: props.client
                    }),
                JsxRuntime.jsx(Pagination.make, {
                      activePage: page + 1 | 0,
                      numPages: (players.length / 10 | 0) - 1 | 0,
                      onChange: (function (newPage) {
                          setPage(function (param) {
                                return newPage - 1 | 0;
                              });
                        })
                    })
              ],
              className: "overflow-x-auto"
            });
}

var TableOuter = {
  make: Table$TableOuter
};

function formatFetch(playersResponse) {
  var data = playersResponse.data;
  if (data !== undefined) {
    return data.Player;
  } else {
    return [];
  }
}

function useFetchPlayers(indexerEndpoint) {
  var match = React.useState(function () {
        return "Loading";
      });
  var setPlayers = match[1];
  React.useEffect((function () {
          var fetchPlayers = async function (indexerEndpoint) {
            var playersResponseOpt = await Queries.fetchPlayers(indexerEndpoint);
            if (playersResponseOpt === undefined) {
              return setPlayers(function (param) {
                          return "Loading";
                        });
            }
            var formatted = formatFetch(playersResponseOpt);
            return setPlayers(function (param) {
                        return {
                                TAG: "Data",
                                _0: formatted
                              };
                      });
          };
          fetchPlayers(indexerEndpoint);
        }), []);
  return match[0];
}

function Table(props) {
  var playersReq = useFetchPlayers("https://indexer.staging.bigdevenergy.link/7f6ebc9/v1/graphql");
  var tmp;
  tmp = typeof playersReq !== "object" ? JsxRuntime.jsx("div", {
          children: "loading..."
        }) : (
      playersReq.TAG === "Data" ? JsxRuntime.jsx(Table$TableOuter, {
              players: playersReq._0,
              mincomind: props.mincomind,
              client: props.client
            }) : JsxRuntime.jsx("div", {
              children: "Error"
            })
    );
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: tmp,
                    className: "flex flex-col items-center justify-center h-screen m-0 p-0 text-primary overflow-y-hidden overflow-x-hidden"
                  })
            });
}

var make = Table;

export {
  Row ,
  TableInner ,
  TableOuter ,
  formatFetch ,
  useFetchPlayers ,
  make ,
}
/* react Not a pure module */
