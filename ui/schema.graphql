schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "Game"
"""
type Game {
  db_write_timestamp: timestamp
  gameId: String!
  id: String!
  player: String!
}

"""
Boolean expression to filter rows from the table "Game". All fields are combined with a logical 'AND'.
"""
input Game_bool_exp {
  _and: [Game_bool_exp!]
  _not: Game_bool_exp
  _or: [Game_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  gameId: String_comparison_exp
  id: String_comparison_exp
  player: String_comparison_exp
}

"""Ordering options when selecting data from "Game"."""
input Game_order_by {
  db_write_timestamp: order_by
  gameId: order_by
  id: order_by
  player: order_by
}

"""
select columns of table "Game"
"""
enum Game_select_column {
  """column name"""
  db_write_timestamp

  """column name"""
  gameId

  """column name"""
  id

  """column name"""
  player
}

"""
Streaming cursor of the table "Game"
"""
input Game_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Game_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Game_stream_cursor_value_input {
  db_write_timestamp: timestamp
  gameId: String
  id: String
  player: String
}

"""
columns and relationships of "Guess"
"""
type Guess {
  attempt: Int!
  db_write_timestamp: timestamp
  gameId: String!
  gameIdLink: String!
  guessPos0: Int!
  guessPos1: Int!
  guessPos2: Int!
  guessPos3: Int!
  hintBulls: Int!
  hintCows: Int!
  id: String!
  player: String!
}

"""
Boolean expression to filter rows from the table "Guess". All fields are combined with a logical 'AND'.
"""
input Guess_bool_exp {
  _and: [Guess_bool_exp!]
  _not: Guess_bool_exp
  _or: [Guess_bool_exp!]
  attempt: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  gameId: String_comparison_exp
  gameIdLink: String_comparison_exp
  guessPos0: Int_comparison_exp
  guessPos1: Int_comparison_exp
  guessPos2: Int_comparison_exp
  guessPos3: Int_comparison_exp
  hintBulls: Int_comparison_exp
  hintCows: Int_comparison_exp
  id: String_comparison_exp
  player: String_comparison_exp
}

"""Ordering options when selecting data from "Guess"."""
input Guess_order_by {
  attempt: order_by
  db_write_timestamp: order_by
  gameId: order_by
  gameIdLink: order_by
  guessPos0: order_by
  guessPos1: order_by
  guessPos2: order_by
  guessPos3: order_by
  hintBulls: order_by
  hintCows: order_by
  id: order_by
  player: order_by
}

"""
select columns of table "Guess"
"""
enum Guess_select_column {
  """column name"""
  attempt

  """column name"""
  db_write_timestamp

  """column name"""
  gameId

  """column name"""
  gameIdLink

  """column name"""
  guessPos0

  """column name"""
  guessPos1

  """column name"""
  guessPos2

  """column name"""
  guessPos3

  """column name"""
  hintBulls

  """column name"""
  hintCows

  """column name"""
  id

  """column name"""
  player
}

"""
Streaming cursor of the table "Guess"
"""
input Guess_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Guess_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Guess_stream_cursor_value_input {
  attempt: Int
  db_write_timestamp: timestamp
  gameId: String
  gameIdLink: String
  guessPos0: Int
  guessPos1: Int
  guessPos2: Int
  guessPos3: Int
  hintBulls: Int
  hintCows: Int
  id: String
  player: String
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "Player"
"""
type Player {
  active: Boolean!
  db_write_timestamp: timestamp
  id: String!
  numberOfGames: Int!
  points: numeric!
}

"""
Boolean expression to filter rows from the table "Player". All fields are combined with a logical 'AND'.
"""
input Player_bool_exp {
  _and: [Player_bool_exp!]
  _not: Player_bool_exp
  _or: [Player_bool_exp!]
  active: Boolean_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  numberOfGames: Int_comparison_exp
  points: numeric_comparison_exp
}

"""Ordering options when selecting data from "Player"."""
input Player_order_by {
  active: order_by
  db_write_timestamp: order_by
  id: order_by
  numberOfGames: order_by
  points: order_by
}

"""
select columns of table "Player"
"""
enum Player_select_column {
  """column name"""
  active

  """column name"""
  db_write_timestamp

  """column name"""
  id

  """column name"""
  numberOfGames

  """column name"""
  points
}

"""
Streaming cursor of the table "Player"
"""
input Player_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Player_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Player_stream_cursor_value_input {
  active: Boolean
  db_write_timestamp: timestamp
  id: String
  numberOfGames: Int
  points: numeric
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "Tournament"
"""
type Tournament {
  db_write_timestamp: timestamp
  id: String!
  pot: numeric!
}

"""
Boolean expression to filter rows from the table "Tournament". All fields are combined with a logical 'AND'.
"""
input Tournament_bool_exp {
  _and: [Tournament_bool_exp!]
  _not: Tournament_bool_exp
  _or: [Tournament_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  pot: numeric_comparison_exp
}

"""Ordering options when selecting data from "Tournament"."""
input Tournament_order_by {
  db_write_timestamp: order_by
  id: order_by
  pot: order_by
}

"""
select columns of table "Tournament"
"""
enum Tournament_select_column {
  """column name"""
  db_write_timestamp

  """column name"""
  id

  """column name"""
  pot
}

"""
Streaming cursor of the table "Tournament"
"""
input Tournament_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Tournament_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Tournament_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  pot: numeric
}

"""
columns and relationships of "chain_metadata"
"""
type chain_metadata {
  block_height: Int!
  chain_id: Int!
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean!
  latest_fetched_block_number: Int!
  latest_processed_block: Int
  num_batches_fetched: Int!
  num_events_processed: Int
  start_block: Int!
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

"""
Boolean expression to filter rows from the table "chain_metadata". All fields are combined with a logical 'AND'.
"""
input chain_metadata_bool_exp {
  _and: [chain_metadata_bool_exp!]
  _not: chain_metadata_bool_exp
  _or: [chain_metadata_bool_exp!]
  block_height: Int_comparison_exp
  chain_id: Int_comparison_exp
  end_block: Int_comparison_exp
  first_event_block_number: Int_comparison_exp
  is_hyper_sync: Boolean_comparison_exp
  latest_fetched_block_number: Int_comparison_exp
  latest_processed_block: Int_comparison_exp
  num_batches_fetched: Int_comparison_exp
  num_events_processed: Int_comparison_exp
  start_block: Int_comparison_exp
  timestamp_caught_up_to_head_or_endblock: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "chain_metadata"."""
input chain_metadata_order_by {
  block_height: order_by
  chain_id: order_by
  end_block: order_by
  first_event_block_number: order_by
  is_hyper_sync: order_by
  latest_fetched_block_number: order_by
  latest_processed_block: order_by
  num_batches_fetched: order_by
  num_events_processed: order_by
  start_block: order_by
  timestamp_caught_up_to_head_or_endblock: order_by
}

"""
select columns of table "chain_metadata"
"""
enum chain_metadata_select_column {
  """column name"""
  block_height

  """column name"""
  chain_id

  """column name"""
  end_block

  """column name"""
  first_event_block_number

  """column name"""
  is_hyper_sync

  """column name"""
  latest_fetched_block_number

  """column name"""
  latest_processed_block

  """column name"""
  num_batches_fetched

  """column name"""
  num_events_processed

  """column name"""
  start_block

  """column name"""
  timestamp_caught_up_to_head_or_endblock
}

"""
Streaming cursor of the table "chain_metadata"
"""
input chain_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: chain_metadata_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input chain_metadata_stream_cursor_value_input {
  block_height: Int
  chain_id: Int
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean
  latest_fetched_block_number: Int
  latest_processed_block: Int
  num_batches_fetched: Int
  num_events_processed: Int
  start_block: Int
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

scalar contract_type

"""
Boolean expression to compare columns of type "contract_type". All fields are combined with logical 'AND'.
"""
input contract_type_comparison_exp {
  _eq: contract_type
  _gt: contract_type
  _gte: contract_type
  _in: [contract_type!]
  _is_null: Boolean
  _lt: contract_type
  _lte: contract_type
  _neq: contract_type
  _nin: [contract_type!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dynamic_contract_registry"
"""
type dynamic_contract_registry {
  block_timestamp: Int!
  chain_id: Int!
  contract_address: String!
  contract_type: contract_type!
  event_id: numeric!
}

"""
Boolean expression to filter rows from the table "dynamic_contract_registry". All fields are combined with a logical 'AND'.
"""
input dynamic_contract_registry_bool_exp {
  _and: [dynamic_contract_registry_bool_exp!]
  _not: dynamic_contract_registry_bool_exp
  _or: [dynamic_contract_registry_bool_exp!]
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  contract_address: String_comparison_exp
  contract_type: contract_type_comparison_exp
  event_id: numeric_comparison_exp
}

"""Ordering options when selecting data from "dynamic_contract_registry"."""
input dynamic_contract_registry_order_by {
  block_timestamp: order_by
  chain_id: order_by
  contract_address: order_by
  contract_type: order_by
  event_id: order_by
}

"""
select columns of table "dynamic_contract_registry"
"""
enum dynamic_contract_registry_select_column {
  """column name"""
  block_timestamp

  """column name"""
  chain_id

  """column name"""
  contract_address

  """column name"""
  contract_type

  """column name"""
  event_id
}

"""
Streaming cursor of the table "dynamic_contract_registry"
"""
input dynamic_contract_registry_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dynamic_contract_registry_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dynamic_contract_registry_stream_cursor_value_input {
  block_timestamp: Int
  chain_id: Int
  contract_address: String
  contract_type: contract_type
  event_id: numeric
}

"""
columns and relationships of "end_of_block_range_scanned_data"
"""
type end_of_block_range_scanned_data {
  block_hash: String!
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
}

"""
Boolean expression to filter rows from the table "end_of_block_range_scanned_data". All fields are combined with a logical 'AND'.
"""
input end_of_block_range_scanned_data_bool_exp {
  _and: [end_of_block_range_scanned_data_bool_exp!]
  _not: end_of_block_range_scanned_data_bool_exp
  _or: [end_of_block_range_scanned_data_bool_exp!]
  block_hash: String_comparison_exp
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "end_of_block_range_scanned_data".
"""
input end_of_block_range_scanned_data_order_by {
  block_hash: order_by
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
}

"""
select columns of table "end_of_block_range_scanned_data"
"""
enum end_of_block_range_scanned_data_select_column {
  """column name"""
  block_hash

  """column name"""
  block_number

  """column name"""
  block_timestamp

  """column name"""
  chain_id
}

"""
Streaming cursor of the table "end_of_block_range_scanned_data"
"""
input end_of_block_range_scanned_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: end_of_block_range_scanned_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input end_of_block_range_scanned_data_stream_cursor_value_input {
  block_hash: String
  block_number: Int
  block_timestamp: Int
  chain_id: Int
}

"""
columns and relationships of "entity_history"
"""
type entity_history {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!

  """An object relationship"""
  event: raw_events
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by aggregate values of table "entity_history"
"""
input entity_history_aggregate_order_by {
  avg: entity_history_avg_order_by
  count: order_by
  max: entity_history_max_order_by
  min: entity_history_min_order_by
  stddev: entity_history_stddev_order_by
  stddev_pop: entity_history_stddev_pop_order_by
  stddev_samp: entity_history_stddev_samp_order_by
  sum: entity_history_sum_order_by
  var_pop: entity_history_var_pop_order_by
  var_samp: entity_history_var_samp_order_by
  variance: entity_history_variance_order_by
}

"""
order by avg() on columns of table "entity_history"
"""
input entity_history_avg_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Boolean expression to filter rows from the table "entity_history". All fields are combined with a logical 'AND'.
"""
input entity_history_bool_exp {
  _and: [entity_history_bool_exp!]
  _not: entity_history_bool_exp
  _or: [entity_history_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_block_timestamp: Int_comparison_exp
  previous_chain_id: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""
columns and relationships of "entity_history_filter"
"""
type entity_history_filter {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!

  """An object relationship"""
  event: raw_events
  log_index: Int!
  new_val(
    """JSON select path"""
    path: String
  ): json
  old_val(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int
  previous_log_index: Int!
}

"""
Boolean expression to filter rows from the table "entity_history_filter". All fields are combined with a logical 'AND'.
"""
input entity_history_filter_bool_exp {
  _and: [entity_history_filter_bool_exp!]
  _not: entity_history_filter_bool_exp
  _or: [entity_history_filter_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  new_val: json_comparison_exp
  old_val: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""Ordering options when selecting data from "entity_history_filter"."""
input entity_history_filter_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  new_val: order_by
  old_val: order_by
  previous_block_number: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history_filter"
"""
enum entity_history_filter_select_column {
  """column name"""
  block_number

  """column name"""
  block_timestamp

  """column name"""
  chain_id

  """column name"""
  entity_id

  """column name"""
  entity_type

  """column name"""
  log_index

  """column name"""
  new_val

  """column name"""
  old_val

  """column name"""
  previous_block_number

  """column name"""
  previous_log_index
}

"""
Streaming cursor of the table "entity_history_filter"
"""
input entity_history_filter_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_filter_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_filter_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  new_val: json
  old_val: json
  previous_block_number: Int
  previous_log_index: Int
}

"""
order by max() on columns of table "entity_history"
"""
input entity_history_max_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by min() on columns of table "entity_history"
"""
input entity_history_min_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""Ordering options when selecting data from "entity_history"."""
input entity_history_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  params: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history"
"""
enum entity_history_select_column {
  """column name"""
  block_number

  """column name"""
  block_timestamp

  """column name"""
  chain_id

  """column name"""
  entity_id

  """column name"""
  entity_type

  """column name"""
  log_index

  """column name"""
  params

  """column name"""
  previous_block_number

  """column name"""
  previous_block_timestamp

  """column name"""
  previous_chain_id

  """column name"""
  previous_log_index
}

"""
order by stddev() on columns of table "entity_history"
"""
input entity_history_stddev_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_pop() on columns of table "entity_history"
"""
input entity_history_stddev_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_samp() on columns of table "entity_history"
"""
input entity_history_stddev_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Streaming cursor of the table "entity_history"
"""
input entity_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  params: json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by sum() on columns of table "entity_history"
"""
input entity_history_sum_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_pop() on columns of table "entity_history"
"""
input entity_history_var_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_samp() on columns of table "entity_history"
"""
input entity_history_var_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by variance() on columns of table "entity_history"
"""
input entity_history_variance_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

scalar entity_type

"""
Boolean expression to compare columns of type "entity_type". All fields are combined with logical 'AND'.
"""
input entity_type_comparison_exp {
  _eq: entity_type
  _gt: entity_type
  _gte: entity_type
  _in: [entity_type!]
  _is_null: Boolean
  _lt: entity_type
  _lte: entity_type
  _neq: entity_type
  _nin: [entity_type!]
}

"""
columns and relationships of "event_sync_state"
"""
type event_sync_state {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  log_index: Int!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "event_sync_state". All fields are combined with a logical 'AND'.
"""
input event_sync_state_bool_exp {
  _and: [event_sync_state_bool_exp!]
  _not: event_sync_state_bool_exp
  _or: [event_sync_state_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  log_index: Int_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "event_sync_state"."""
input event_sync_state_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  transaction_index: order_by
}

"""
select columns of table "event_sync_state"
"""
enum event_sync_state_select_column {
  """column name"""
  block_number

  """column name"""
  block_timestamp

  """column name"""
  chain_id

  """column name"""
  log_index

  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "event_sync_state"
"""
input event_sync_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_sync_state_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_sync_state_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  log_index: Int
  transaction_index: Int
}

scalar event_type

"""
Boolean expression to compare columns of type "event_type". All fields are combined with logical 'AND'.
"""
input event_type_comparison_exp {
  _eq: event_type
  _gt: event_type
  _gte: event_type
  _in: [event_type!]
  _is_null: Boolean
  _lt: event_type
  _lte: event_type
  _neq: event_type
  _nin: [event_type!]
}

input get_entity_history_filter_args {
  end_block: Int
  end_chain_id: Int
  end_log_index: Int
  end_timestamp: Int
  start_block: Int
  start_chain_id: Int
  start_log_index: Int
  start_timestamp: Int
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "persisted_state"
"""
type persisted_state {
  abi_files_hash: String!
  config_hash: String!
  envio_version: String!
  handler_files_hash: String!
  id: Int!
  schema_hash: String!
}

"""
Boolean expression to filter rows from the table "persisted_state". All fields are combined with a logical 'AND'.
"""
input persisted_state_bool_exp {
  _and: [persisted_state_bool_exp!]
  _not: persisted_state_bool_exp
  _or: [persisted_state_bool_exp!]
  abi_files_hash: String_comparison_exp
  config_hash: String_comparison_exp
  envio_version: String_comparison_exp
  handler_files_hash: String_comparison_exp
  id: Int_comparison_exp
  schema_hash: String_comparison_exp
}

"""Ordering options when selecting data from "persisted_state"."""
input persisted_state_order_by {
  abi_files_hash: order_by
  config_hash: order_by
  envio_version: order_by
  handler_files_hash: order_by
  id: order_by
  schema_hash: order_by
}

"""
select columns of table "persisted_state"
"""
enum persisted_state_select_column {
  """column name"""
  abi_files_hash

  """column name"""
  config_hash

  """column name"""
  envio_version

  """column name"""
  handler_files_hash

  """column name"""
  id

  """column name"""
  schema_hash
}

"""
Streaming cursor of the table "persisted_state"
"""
input persisted_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: persisted_state_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input persisted_state_stream_cursor_value_input {
  abi_files_hash: String
  config_hash: String
  envio_version: String
  handler_files_hash: String
  id: Int
  schema_hash: String
}

type query_root {
  """
  fetch data from the table: "Game"
  """
  Game(
    """distinct select on columns"""
    distinct_on: [Game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Game_order_by!]

    """filter the rows returned"""
    where: Game_bool_exp
  ): [Game!]!

  """fetch data from the table: "Game" using primary key columns"""
  Game_by_pk(id: String!): Game

  """
  fetch data from the table: "Guess"
  """
  Guess(
    """distinct select on columns"""
    distinct_on: [Guess_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guess_order_by!]

    """filter the rows returned"""
    where: Guess_bool_exp
  ): [Guess!]!

  """fetch data from the table: "Guess" using primary key columns"""
  Guess_by_pk(id: String!): Guess

  """
  fetch data from the table: "Player"
  """
  Player(
    """distinct select on columns"""
    distinct_on: [Player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Player_order_by!]

    """filter the rows returned"""
    where: Player_bool_exp
  ): [Player!]!

  """fetch data from the table: "Player" using primary key columns"""
  Player_by_pk(id: String!): Player

  """
  fetch data from the table: "Tournament"
  """
  Tournament(
    """distinct select on columns"""
    distinct_on: [Tournament_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Tournament_order_by!]

    """filter the rows returned"""
    where: Tournament_bool_exp
  ): [Tournament!]!

  """fetch data from the table: "Tournament" using primary key columns"""
  Tournament_by_pk(id: String!): Tournament

  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]

    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!

  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata

  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]

    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!

  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry

  """
  fetch data from the table: "end_of_block_range_scanned_data"
  """
  end_of_block_range_scanned_data(
    """distinct select on columns"""
    distinct_on: [end_of_block_range_scanned_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [end_of_block_range_scanned_data_order_by!]

    """filter the rows returned"""
    where: end_of_block_range_scanned_data_bool_exp
  ): [end_of_block_range_scanned_data!]!

  """
  fetch data from the table: "end_of_block_range_scanned_data" using primary key columns
  """
  end_of_block_range_scanned_data_by_pk(block_number: Int!, chain_id: Int!): end_of_block_range_scanned_data

  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]

    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!

  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history

  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]

    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!

  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!, previous_log_index: Int!): entity_history_filter

  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]

    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!

  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state

  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!

    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]

    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!

  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]

    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!

  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state

  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]

    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!

  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
}

"""
columns and relationships of "raw_events"
"""
type raw_events {
  block_hash: String!
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  db_write_timestamp: timestamp

  """An array relationship"""
  event_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]

    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  event_id: numeric!
  event_type: event_type!
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json!
  src_address: String!
  transaction_hash: String!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "raw_events". All fields are combined with a logical 'AND'.
"""
input raw_events_bool_exp {
  _and: [raw_events_bool_exp!]
  _not: raw_events_bool_exp
  _or: [raw_events_bool_exp!]
  block_hash: String_comparison_exp
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  event_history: entity_history_bool_exp
  event_id: numeric_comparison_exp
  event_type: event_type_comparison_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  src_address: String_comparison_exp
  transaction_hash: String_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "raw_events"."""
input raw_events_order_by {
  block_hash: order_by
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  db_write_timestamp: order_by
  event_history_aggregate: entity_history_aggregate_order_by
  event_id: order_by
  event_type: order_by
  log_index: order_by
  params: order_by
  src_address: order_by
  transaction_hash: order_by
  transaction_index: order_by
}

"""
select columns of table "raw_events"
"""
enum raw_events_select_column {
  """column name"""
  block_hash

  """column name"""
  block_number

  """column name"""
  block_timestamp

  """column name"""
  chain_id

  """column name"""
  db_write_timestamp

  """column name"""
  event_id

  """column name"""
  event_type

  """column name"""
  log_index

  """column name"""
  params

  """column name"""
  src_address

  """column name"""
  transaction_hash

  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "raw_events"
"""
input raw_events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: raw_events_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input raw_events_stream_cursor_value_input {
  block_hash: String
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  db_write_timestamp: timestamp
  event_id: numeric
  event_type: event_type
  log_index: Int
  params: json
  src_address: String
  transaction_hash: String
  transaction_index: Int
}

type subscription_root {
  """
  fetch data from the table: "Game"
  """
  Game(
    """distinct select on columns"""
    distinct_on: [Game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Game_order_by!]

    """filter the rows returned"""
    where: Game_bool_exp
  ): [Game!]!

  """fetch data from the table: "Game" using primary key columns"""
  Game_by_pk(id: String!): Game

  """
  fetch data from the table in a streaming manner: "Game"
  """
  Game_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Game_stream_cursor_input]!

    """filter the rows returned"""
    where: Game_bool_exp
  ): [Game!]!

  """
  fetch data from the table: "Guess"
  """
  Guess(
    """distinct select on columns"""
    distinct_on: [Guess_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guess_order_by!]

    """filter the rows returned"""
    where: Guess_bool_exp
  ): [Guess!]!

  """fetch data from the table: "Guess" using primary key columns"""
  Guess_by_pk(id: String!): Guess

  """
  fetch data from the table in a streaming manner: "Guess"
  """
  Guess_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Guess_stream_cursor_input]!

    """filter the rows returned"""
    where: Guess_bool_exp
  ): [Guess!]!

  """
  fetch data from the table: "Player"
  """
  Player(
    """distinct select on columns"""
    distinct_on: [Player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Player_order_by!]

    """filter the rows returned"""
    where: Player_bool_exp
  ): [Player!]!

  """fetch data from the table: "Player" using primary key columns"""
  Player_by_pk(id: String!): Player

  """
  fetch data from the table in a streaming manner: "Player"
  """
  Player_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Player_stream_cursor_input]!

    """filter the rows returned"""
    where: Player_bool_exp
  ): [Player!]!

  """
  fetch data from the table: "Tournament"
  """
  Tournament(
    """distinct select on columns"""
    distinct_on: [Tournament_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Tournament_order_by!]

    """filter the rows returned"""
    where: Tournament_bool_exp
  ): [Tournament!]!

  """fetch data from the table: "Tournament" using primary key columns"""
  Tournament_by_pk(id: String!): Tournament

  """
  fetch data from the table in a streaming manner: "Tournament"
  """
  Tournament_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Tournament_stream_cursor_input]!

    """filter the rows returned"""
    where: Tournament_bool_exp
  ): [Tournament!]!

  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]

    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!

  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata

  """
  fetch data from the table in a streaming manner: "chain_metadata"
  """
  chain_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [chain_metadata_stream_cursor_input]!

    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!

  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]

    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!

  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry

  """
  fetch data from the table in a streaming manner: "dynamic_contract_registry"
  """
  dynamic_contract_registry_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dynamic_contract_registry_stream_cursor_input]!

    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!

  """
  fetch data from the table: "end_of_block_range_scanned_data"
  """
  end_of_block_range_scanned_data(
    """distinct select on columns"""
    distinct_on: [end_of_block_range_scanned_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [end_of_block_range_scanned_data_order_by!]

    """filter the rows returned"""
    where: end_of_block_range_scanned_data_bool_exp
  ): [end_of_block_range_scanned_data!]!

  """
  fetch data from the table: "end_of_block_range_scanned_data" using primary key columns
  """
  end_of_block_range_scanned_data_by_pk(block_number: Int!, chain_id: Int!): end_of_block_range_scanned_data

  """
  fetch data from the table in a streaming manner: "end_of_block_range_scanned_data"
  """
  end_of_block_range_scanned_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [end_of_block_range_scanned_data_stream_cursor_input]!

    """filter the rows returned"""
    where: end_of_block_range_scanned_data_bool_exp
  ): [end_of_block_range_scanned_data!]!

  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]

    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!

  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history

  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]

    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!

  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!, previous_log_index: Int!): entity_history_filter

  """
  fetch data from the table in a streaming manner: "entity_history_filter"
  """
  entity_history_filter_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [entity_history_filter_stream_cursor_input]!

    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!

  """
  fetch data from the table in a streaming manner: "entity_history"
  """
  entity_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [entity_history_stream_cursor_input]!

    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!

  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]

    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!

  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state

  """
  fetch data from the table in a streaming manner: "event_sync_state"
  """
  event_sync_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_sync_state_stream_cursor_input]!

    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!

  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!

    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]

    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!

  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]

    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!

  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state

  """
  fetch data from the table in a streaming manner: "persisted_state"
  """
  persisted_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [persisted_state_stream_cursor_input]!

    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!

  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]

    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!

  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events

  """
  fetch data from the table in a streaming manner: "raw_events"
  """
  raw_events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [raw_events_stream_cursor_input]!

    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

